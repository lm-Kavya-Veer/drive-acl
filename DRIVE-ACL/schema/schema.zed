definition users {}

definition roles {
  relation user: users
  relation scope: page | partner | advertiser | publisher | feature
}

definition superroot {
  relation superadmin: users

  permission super = superadmin
}

caveat is_internal_and_enabled(enabled bool, principal_email string, email_domain string) {
    enabled && principal_email == email_domain
}

caveat within_window(start_ts int, end_ts int, request_time int) {
    request_time >= start_ts && request_time <= end_ts
}

definition page {
  relation root: superroot
  relation role: roles
  relation user: users
  relation public: users:*
  relation denied_user: users

  permission super = root->super
  permission admin = root->super
  permission view = (super + admin  + user + role->user + public) - denied_user
}

definition partner {
  relation root: superroot
  relation user: users
  relation role: roles
  relation public: users:*
  relation denied_user: users

  permission admin = root->super
  permission super = root->super
  permission view  = (super + admin + public + user + (role->user & role->scope)) - denied_user

}

definition advertiser {
  relation root: superroot
  relation parent: partner
  relation user: users
  relation role: roles
  relation public: users:*
  relation denied_user: users

  permission admin = root->super + parent->admin
  permission super = root->super
  permission view =
      (super +
      public +
      admin  + 
      parent->view +
      (parent->view & user) +
      (role->user & parent->view)) - (denied_user & parent->view)
}

definition publisher {
  relation root: superroot
  relation parent: partner
  relation user: users
  relation role: roles
  relation public: users:*
  relation denied_user: users

  permission super = root->super
  permission view =
      (super +
      public +
      (parent->view & user) +
      (role->user & parent->view)) - (denied_user & parent->view)
  permission admin = super + role->user + parent->admin
}

definition api {
  relation parent: feature
  relation role: roles
  relation user: users
  relation denied_user: users

  permission super = parent->super
  permission admin = parent->admin
  permission call = (
      super + 
      admin +
      (parent->view) +
      (user & parent->view)) - denied_user
}

definition feature {
  relation root: superroot
  relation parent: advertiser | publisher | feature | partner | page
  relation user: users
  relation role: roles
  relation public: users:*
  relation denied_user: users
  relation api: api

  permission super = root->super
  permission admin = root->super + parent->admin
  permission can_direct_user_view = user & parent->view
  permission inherited_view = parent->view
  permission view = (
      super + 
      admin +
      public +
      can_direct_user_view +
      (role->user & inherited_view)) - (denied_user & parent->view)

  permission call_api = api->call
}
